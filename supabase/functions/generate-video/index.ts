
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const SYNTHESIA_API_KEY = Deno.env.get('SYNTHESIA_API_KEY');

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { recipe } = await req.json();
    
    if (!recipe) {
      return new Response(
        JSON.stringify({ error: "No recipe provided" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    console.log(`Generating video for recipe: ${recipe.name}`);
    
    // Format the recipe for video generation
    const recipeSteps = recipe.steps.map((step, index) => {
      return `Step ${index + 1}: ${step.instruction}${step.tip ? ` (Tip: ${step.tip})` : ''}`;
    }).join("\n");
    
    const ingredientsList = recipe.ingredients.map((ing) => {
      return `${ing.amount} ${ing.name}${ing.notes ? ` (${ing.notes})` : ''}`;
    }).join(", ");
    
    // Create script for the AI chef
    const script = `
Hi, I'm your AI Chef! Today I'll show you how to make ${recipe.name}.

This ${recipe.cuisine} dish serves ${recipe.servings} and takes about ${recipe.cookingTime} minutes to prepare.

Here's what you'll need:
${recipe.ingredients.map(ing => `- ${ing.amount} ${ing.name}${ing.notes ? ` (${ing.notes})` : ''}`).join("\n")}

Now, let's get cooking!

${recipe.steps.map((step, index) => 
  `Step ${index + 1}: ${step.instruction}${step.tip ? `\nTip: ${step.tip}` : ''}`
).join("\n\n")}

And that's it! Your ${recipe.name} is ready to serve. Enjoy your meal!
    `;
    
    console.log("Prepared video script:", script.substring(0, 200) + "...");
    
    if (!SYNTHESIA_API_KEY) {
      console.log("No Synthesia API key found, returning fallback video");
      return new Response(
        JSON.stringify({
          success: true,
          videoUrl: "https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
          fallback: true,
          note: "No Synthesia API key configured, using fallback video"
        }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }
    
    try {
      // Create a video with Synthesia API
      console.log("Calling Synthesia API to create video");
      
      const syntesiaResponse = await fetch("https://api.synthesia.io/v2/videos", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${SYNTHESIA_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          test: false,
          title: `Recipe for ${recipe.name}`,
          description: `AI Chef tutorial for ${recipe.name}`,
          visibility: "public",
          avatarSettings: {
            avatarId: "anna_costume1_cameraA", // Using a default avatar
            voiceId: "en-US-amy"
          },
          input: {
            scriptText: script
          },
          background: {
            id: "kitchen_1", // Using a kitchen background if available
            template: "standard"
          }
        })
      });
      
      if (!syntesiaResponse.ok) {
        throw new Error(`Synthesia API error: ${syntesiaResponse.status}`);
      }
      
      const videoData = await syntesiaResponse.json();
      console.log("Synthesia video created:", videoData);
      
      // Return the video ID - in a real app you would poll for completion
      // For now, we'll just return the video ID and a fallback
      return new Response(
        JSON.stringify({
          success: true,
          syntesiaVideoId: videoData.id,
          videoUrl: "https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4", // Fallback while processing
          message: "Video is being generated by Synthesia. This can take a few minutes."
        }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
      
    } catch (syntesiaError) {
      console.error("Synthesia API error:", syntesiaError);
      
      // Fallback to a sample video if Synthesia fails
      return new Response(
        JSON.stringify({
          success: true,
          videoUrl: "https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
          fallback: true,
          error: syntesiaError.message
        }),
        { headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }
  } catch (error) {
    console.error("Error in generate-video function:", error);
    
    // Return a fallback video
    return new Response(
      JSON.stringify({
        success: true,
        videoUrl: "https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
        fallback: true,
        error: error.message
      }),
      { headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
